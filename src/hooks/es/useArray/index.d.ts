export default function useArray<T>(initialValue?: T[]): {
    push: (item: T) => void;
    unshift: (item: T) => void;
    pop: () => void;
    shift: () => void;
    slice: (start?: number | undefined, end?: number | undefined) => void;
    splice: (index: number, deleteCount: number, ...insertions: T[]) => void;
    remove: (item: T) => void;
    removeAt: (index: number) => void;
    insertAt: (index: number, item: T) => void;
    concat: (item: T | T[]) => void;
    replace: (from: T, to: T) => void;
    replaceAll: (from: T, to: T) => void;
    replaceAt: (index: number, item: T) => void;
    updateAt: (index: number, item: T) => void;
    map: (iteratee: (item: T, index: number) => T) => void;
    filter: (predicate: (item: T, index: number) => boolean) => void;
    union: (array: T[]) => void;
    intersect: (array: T[]) => void;
    difference: (array: T[]) => void;
    reverse: () => void;
    sort: (compare?: ((x: T, y: T) => number) | undefined) => void;
    clear: () => void;
    state: T[];
    setState: (next: T[] | ((state: T[]) => void | T[]) | ((state: T[]) => Promise<void>)) => void;
    reset: () => void;
};
